%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 et
[
    %% rmud core config
    {rmud, [
%        {riakc_pb_ip_port, {"127.0.0.1", 8087}}
        {riakc_pb_ip_port, {"192.168.1.10", 8087}}
    ]},

 %% Riak Core config
 {riak_core, [
              %% Default location of ringstate
              {ring_state_dir, "{{ring_state_dir}}"},

              %% http is a list of IP addresses and TCP ports that the Riak
              %% HTTP interface will bind.
              {http, [ {"127.0.0.1" , 8068 } ]},

              %% https is a list of IP addresses and TCP ports that the Riak
              %% HTTPS interface will bind.
              %{https, [{ "127.0.0.1" , 8068 }]},

              %% Default cert and key locations for https can be overridden
              %% with the ssl config variable, for example:
              %{ssl, [
              %       {certfile, "{{platform_etc_dir}}/cert.pem"},
              %       {keyfile, "{{platform_etc_dir}}/key.pem"}
              %      ]},
              
              %% riak_handoff_port is the TCP port that Riak uses for
              %% intra-cluster data handoff.
              {handoff_port, 8069 },

              %% To encrypt riak_core intra-cluster data handoff traffic,
              %% uncomment the following line and edit its path to an
              %% appropriate certfile and keyfile.  (This example uses a
              %% single file with both items concatenated together.)
              %{handoff_ssl_options, [{certfile, "/tmp/erlserver.pem"}]},

              %% Platform-specific installation paths (substituted by rebar)
              {platform_bin_dir, "{{platform_bin_dir}}"},
              {platform_data_dir, "{{platform_data_dir}}"},
              {platform_etc_dir, "{{platform_etc_dir}}"},
              {platform_lib_dir, "{{platform_lib_dir}}"},
              {platform_log_dir, "{{platform_log_dir}}"}
             ]},

 %% riak_sysmon config
 {riak_sysmon, [
         %% To disable forwarding events of a particular type, use a
         %% limit of 0.
         {process_limit, 30},
         {port_limit, 30},

         %% Finding reasonable limits for a given workload is a matter
         %% of experimentation.
         {gc_ms_limit, 50},
         {heap_word_limit, 10485760}
        ]},
{sasl, [
        {sasl_error_logger, false}
    ]}
].
